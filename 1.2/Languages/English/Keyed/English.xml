<?xml version="1.0" encoding="utf-8"?>
<LanguageData>

	<!--Tabs-->
	<tab.settings>Settings</tab.settings>
	<tab.tick>Tick</tab.tick>
	<tab.update>Update</tab.update>
	<tab.gui>GUI</tab.gui>
	<tab.modder>Modder</tab.modder>

	<!--Tab Descriptions-->
	<tab.settings.desc>Enable and disable optional settings which effect which information is displayed</tab.settings.desc>
	<tab.tick.desc>Methods which are tick based</tab.tick.desc>
	<tab.update.desc>Methods which are update based</tab.update.desc>
	<tab.gui.desc>Methods which are run on gui</tab.gui.desc>
	<tab.modder.desc>Methods which have been added by modders via Analyzer.xml</tab.modder.desc>

	<!--Settings-->
	<settings.wiki>Analyzer Wiki</settings.wiki>
	<settings.discord>Dubs Discord</settings.discord>
	<settings>Settings</settings>
	<settings.dnspy>Path to Dnspy (Including the Exe)</settings.dnspy>
	<settings.ups>Stat updates per second</settings.ups>
	<settings.logging>Verbose Logging</settings.logging>
	<settings.side.panel>Enable Side Panel</settings.side.panel>

	<ProfilePatchMethod>Profile</ProfilePatchMethod>
	<input.method>Method</input.method>
	<input.type>Methods in Type</input.type>
	<input.methodharmony>Patches on a Method</input.methodharmony>
	<input.typeharmony>Patches on a Type</input.typeharmony>
	<input.methodinternal>Method Internals</input.methodinternal>
	<input.assembly>Assembly</input.assembly>
	<patch.type.tick>Tick</patch.type.tick>
	<patch.type.update>Update</patch.type.update>
	<patch>Patch!</patch>

	<!-- Unpatching -->
	<UnProfilePatchMethod>Remove Profiling (Unpatching)</UnProfilePatchMethod>
	<input.unpatchmethod>Method</input.unpatchmethod>
	<input.unpatchmethodsonmethod>Patches on a Method</input.unpatchmethodsonmethod>
	<input.unpatchtype>Patches on a Type</input.unpatchtype>
	<input.unpatchinternalmethod>Patches inside a Method</input.unpatchinternalmethod>
	<input.unpatchall>All</input.unpatchall>

	<unpatch>UnPatch!</unpatch>
	<CustoMethProfPatch>Profile a method e.g. ResourceReadout:ResourceReadoutOnGUI</CustoMethProfPatch>
	<CustoTickPatch>Custom Tick</CustoTickPatch>
	<CustoUpdatePatch>Custom Update</CustoUpdatePatch>
	<inputMethod>Profile a method</inputMethod>
	<inputType>Profile all the methods in a type</inputType>
	<inputMethodHarmony>Profile all the harmony patches of a method</inputMethodHarmony>
	<inputTypeHarmony>Profile all the harmony patches effecting a type</inputTypeHarmony>
	<TryCustoPatch>Try patch</TryCustoPatch>
	<TryCustoUnPatch>Try unpatch</TryCustoUnPatch>
	<CustoUnPatchMeth>Unpatch a Method</CustoUnPatchMeth>
	<CustoUnPatchAllOnMeth>Unpatch the patches on a method</CustoUnPatchAllOnMeth>
	<CustoUnPatchAll>Unpatch all profiler patches</CustoUnPatchAll>

	<!--Top Row-->
	<top.pause.analyzer>Pause/Unpause profiling that the analyzer is done, this is not equivalent to unpatching</top.pause.analyzer>
	<top.search>Search by name or time to filter which entries show</top.search>
	<top.gc.tip>This will show a rough estimate of the memory consumed and thrown away at a given time</top.gc.tip>
	<top.fps.tip>This will show your calculated frames per second</top.fps.tip>
	<top.tps.tip>This will show your ticks per second, ticks are the metric the game uses to quantiy time passing, multiple ticks can happen per second, the game aims to reach 60tps at 1x</top.tps.tip>

	<!-- Logs -->
	<logs.max>Max</logs.max>
	<logs.av>Average</logs.av>
	<logs.percent>Percent</logs.percent>
	<logs.total>Total</logs.total>
	<logs.calls>Calls</logs.calls>
	<logs.name>Name</logs.name>

	<logs.max.desc>Sort the rows by the maximum (MS) peak the method has reached</logs.max.desc>
	<logs.av.desc>Sort the rows by the average (MS) the method is reaching</logs.av.desc>
	<logs.percent.desc>Sort the rows by relative percent in the category</logs.percent.desc>
	<logs.total.desc>Sort the rows by total (MS) impact</logs.total.desc>
	<logs.calls.desc>Sort the rows by total amount of calls</logs.calls.desc>
	<logs.name.desc>Sort the rows in alphabetical order</logs.name.desc>

	<!-- Entry -->

	<!-- GUI -->
	<entry.gui.colonistbar>Colonist Bar OnGUI</entry.gui.colonistbar>
	<entry.gui.colonistbar.tooltip>The colonist bar along the top of the screen</entry.gui.colonistbar.tooltip>

	<entry.gui.dotabs>Do Tabs</entry.gui.dotabs>
	<entry.gui.dotabs.tooltip>The inspect pane which opens up upon selecting a thing</entry.gui.dotabs.tooltip>

	<entry.gui.gamecomponent>Game Component OnGUI</entry.gui.gamecomponent>
	<entry.gui.gamecomponent.tooltip>The GUI methods for each gamecomponent</entry.gui.gamecomponent.tooltip>

	<entry.gui.resourcereadout>Resource Readout OnGUI</entry.gui.resourcereadout>
	<entry.gui.resourcereadout.tooltip>The UI function for the resource readout on the left of the screen</entry.gui.resourcereadout.tooltip>

	<entry.gui.uiroot>UI Root OnGUI</entry.gui.uiroot>
	<entry.gui.uiroot.tooltip>A variety of OnGUI methods for various types, including; UIRoot_Play, WindowStack, AlertsReadout, MainButtonsRoot</entry.gui.uiroot.tooltip>

	<entry.gui.windowstack>Window Stack OnGUI</entry.gui.windowstack>
	<entry.gui.windowstack.tooltip>The OnGUI method for the window stack, should show profiling for all active windows</entry.gui.windowstack.tooltip>

	<!-- Tick -->

	<entry.tick.single>Single Tick</entry.tick.single>
	<entry.tick.single.tooltip>A variety of tick methods, including; World, History, FilthMonitor, Storyteller</entry.tick.single.tooltip>

	<entry.tick.pathfinder>Pathfinding</entry.tick.pathfinder>
	<entry.tick.pathfinder.tooltip>Shows a variety of methods which are used in pathfinding</entry.tick.pathfinder.tooltip>

	<entry.tick.gamecomponent>Game Component Tick</entry.tick.gamecomponent>
	<entry.tick.gamecomponent.tooltip>The Tick methods for each gamecomponent</entry.tick.gamecomponent.tooltip>

	<entry.tick.lord>Lords</entry.tick.lord>
	<entry.tick.lord.tooltip>Lords are used for group AI, like weddings, raids, traders etc</entry.tick.lord.tooltip>

	<entry.tick.pathfinder>Pathfinding</entry.tick.pathfinder>
	<entry.tick.pathfinder.tooltip>Shows a variety of methods which are used in pathfinding</entry.tick.pathfinder.tooltip>

	<entry.tick.stats>Statistics</entry.tick.stats>
	<entry.tick.stats.tooltip>A variety of methods which are used to calculate and looking up stat-based values</entry.tick.stats.tooltip>

	<entry.tick.mapcomponent>Map Component Tick</entry.tick.mapcomponent>
	<entry.tick.mapcomponent.tooltip>The Tick method for Map Components</entry.tick.mapcomponent.tooltip>

	<entry.tick.needs>Needs</entry.tick.needs>
	<entry.tick.needs.tooltip>Shows a variety of methods which are used in Needs calculations</entry.tick.needs.tooltip>

	<entry.tick.pawn>Pawn Tick</entry.tick.pawn>
	<entry.tick.pawn.tooltip>The variety of methods which are called on Pawn:Tick, including a variety of trackers</entry.tick.pawn.tooltip>

	<entry.tick.room>Rooms</entry.tick.room>
	<entry.tick.room.tooltip>The method which is responsible for the updating of room stats</entry.tick.room.tooltip>

	<entry.tick.thinknodes>ThinkNodes</entry.tick.thinknodes>
	<entry.tick.thinknodes.tooltip>ThinkNodes are related to how pawns decide what they are doing</entry.tick.thinknodes.tooltip>

	<entry.tick.things>Tick Things</entry.tick.things>
	<entry.tick.things.tooltip>Profiles the ticking methods of various things on the map</entry.tick.things.tooltip>

	<entry.tick.jobgiver>Job Giver</entry.tick.jobgiver>
	<entry.tick.jobgiver.tooltip>Job Giver shows jobs which pro-actively seek out work to be done. For example. Fermenting barrels looking for incregredients, bills looking for resources, etc</entry.tick.jobgiver.tooltip>

	<entry.tick.jobgiverd>Job Giver (Detoured)</entry.tick.jobgiverd>
	<entry.tick.jobgiverd.tooltip>Job Giver shows jobs which pro-actively seek out work to be done. For example. Fermenting barrels looking for incregredients, bills looking for resources, etc</entry.tick.jobgiverd.tooltip>

	<entry.tick.world>World Tick</entry.tick.world>
	<entry.tick.world.tooltip>Tick methods for various world entries, such as; WorldPawns, Factions, Caravans</entry.tick.world.tooltip>

	<!-- Update  -->

	<entry.update.dynamicdraw>Draw Dynamic Things</entry.update.dynamicdraw>
	<entry.update.dynamicdraw.tooltip>The draw method for things which are drawn via the DynamicDrawManager</entry.update.dynamicdraw.tooltip>

	<entry.update.gamecomponent>Game Component Update</entry.update.gamecomponent>
	<entry.update.gamecomponent.tooltip>The Update method for each gamecomponent</entry.update.gamecomponent.tooltip>

	<entry.update.harmonypatches>Harmony Patches</entry.update.harmonypatches>
	<entry.update.harmonypatches.tooltip>Harmony patches added by mods (Prefixes and Postfixes only)</entry.update.harmonypatches.tooltip>

	<entry.update.harmonytranspilers>Harmony Transpilers</entry.update.harmonytranspilers>
	<entry.update.harmonytranspilers.tooltip>Shows a semi-accurate profiling of all Harmony Transpilers, there is a writeup in the Wiki going into detail about it</entry.update.harmonytranspilers.tooltip>

	<entry.update.infocard>Info Card</entry.update.infocard>
	<entry.update.infocard.tooltip>A variety of methods which relate to info panels, including stats, and gui methods</entry.update.infocard.tooltip>

	<entry.update.mapcomponent>Map Component Update</entry.update.mapcomponent>
	<entry.update.mapcomponent.tooltip>The Update method for Map Components</entry.update.mapcomponent.tooltip>

	<entry.update.sections>Sections</entry.update.sections>
	<entry.update.sections.tooltip>Shows the regenerate method for SectionLayers (sectionlayers are things like Snow, SunShadows, Zones)</entry.update.sections.tooltip>

	<entry.update.pawnrenderer>Pawn Renderer</entry.update.pawnrenderer>
	<entry.update.pawnrenderer.tooltip>Shows the pawnrenderer function, which is responsible for the renderering of pawns and apparel</entry.update.pawnrenderer.tooltip>

	<entry.update.root>Root</entry.update.root>
	<entry.update.root.tooltip>Various root methods</entry.update.root.tooltip>

	<entry.update.sectionlayerthings>Section Layer Things</entry.update.sectionlayerthings>
	<entry.update.sectionlayerthings.tooltip>More in-depth profiling of Section layers, including mesh creation and the TakePrintFrom function</entry.update.sectionlayerthings.tooltip>

	<entry.update.shooting>Shooting and Combat</entry.update.shooting>
	<entry.update.shooting.tooltip>Shows a variety of methods related to combat and shooting, including verbs, turrets, projectiles etc</entry.update.shooting.tooltip>

	<entry.update.uiroot>UI Root Update</entry.update.uiroot>
	<entry.update.uiroot.tooltip>A variety of update methods for GUI-related functionality, such as; AlertsReadout, Messages, Tutor</entry.update.uiroot.tooltip>

	<entry.update.frametimes>Frame times</entry.update.frametimes>
	<entry.update.frametimes.tooltip>Shows entries which correlate to the frame times of your game (how long does each frame take to complete)</entry.update.frametimes.tooltip>


	<!-- Custom -->

	<entry.update.custom>Custom Update</entry.update.custom>
	<entry.update.custom.tooltip>Custom Profiled methods in the update category</entry.update.custom.tooltip>

	<entry.tick.custom>Custom Tick</entry.tick.custom>
	<entry.tick.custom.tooltip>Custom Profiled methods in the tick category</entry.tick.custom.tooltip>

	<!-- Performance Patches -->

	<performance.sectionlayersnow>Improve the speed of rendering for snow</performance.sectionlayersnow>
	<performance.sectionlayersnow.tooltip>Replaces a Mathf.Lerp with byte multiplication in the calculation for snow colour</performance.sectionlayersnow.tooltip>

	<performance.lordnotifydamage>Remove some stutters for raids</performance.lordnotifydamage>
	<performance.lordnotifydamage.tooltip>Removes a redundant damage-notification check from the Lord toils 'LordToil_AssaultColony' and 'LordToil_AssaultColonySappers'</performance.lordnotifydamage.tooltip>

	<performance.killaudio>Remove in-game music</performance.killaudio>
	<performance.killaudio.tooltip>Destructively prefixes the 'MusicManagerPlay:MusicUpdate' function</performance.killaudio.tooltip>

	<performance.buildingrepair>Optimize the repair job</performance.buildingrepair>
	<performance.buildingrepair.tooltip>Removes objects that are not repairable or do not have hitpoints (which the Type 'ListerBuildingsRepairable' does not filter out)</performance.buildingrepair.tooltip>

	<performance.roof>Optimize roof jobgiver</performance.roof>
	<performance.roof.tooltip>Caches when roofs are removed / need replacing, and preventing the jobgiver from running when no state has changed</performance.roof.tooltip>

	<performance.wallsnconduits>Optimize rendering for walls and conduits</performance.wallsnconduits>
	<performance.wallsnconduits.tooltip>Set the mesh draw type for walls and conduits to 'MapMeshOnly'</performance.wallsnconduits.tooltip>

	<performance.compdeepdrill>Optimize deep drills</performance.compdeepdrill>
	<performance.compdeepdrill.tooltip>Skips a check for the 'correct' stone under a drill, improves performance of drills when using pawns with high mining</performance.compdeepdrill.tooltip>



</LanguageData>